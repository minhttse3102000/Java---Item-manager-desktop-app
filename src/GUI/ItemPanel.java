/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DAO.ItemDAO;
import DTO.ItemDTO;
import DTO.SupplierDTO;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author minhv
 */
public class ItemPanel extends javax.swing.JPanel {

    /**
     * Creates new form ItemPanel
     */
    ArrayList<ItemDTO> itemList;
    boolean saveForAdd=false;
    public ItemPanel() {
        initComponents();
        loadItemTable();
    }

    void loadItemTable() {
        Vector data = new Vector();
        Vector header = new Vector();
        header.add("Code");
        header.add("Name");
        header.add("Supplier");
        header.add("Unit");
        header.add("Price");
        header.add("Supply");
        itemList = new ArrayList<>();
        itemList = ItemDAO.getItemData();
        for (ItemDTO itemDTO : itemList) {
            Vector row = new Vector();
            row.add(itemDTO.getItemCode());
            row.add(itemDTO.getItemName());
            row.add(itemDTO.getSupplier());
            row.add(itemDTO.getUnit());
            row.add(itemDTO.getPrice());
            if (itemDTO.getSupplying() == 1) {
                row.add("true");
            } else {
                row.add("false");
            }
            data.add(row);
        }
       
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        model.setDataVector(data, header);

        itemTable.setRowSelectionInterval(0, 0);
        itemTableMouseClicked(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        codeTextField = new javax.swing.JTextField();
        nameTextField = new javax.swing.JTextField();
        unitTextField = new javax.swing.JTextField();
        supplierComboBox = new javax.swing.JComboBox<>();
        priceTextField = new javax.swing.JTextField();
        supplyCheckBox = new javax.swing.JCheckBox();

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Code", "Name", "Supplier", "Unit", "Price", "Supply"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.getTableHeader().setReorderingAllowed(false);
        itemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(itemTable);

        jLabel7.setText("Item Code");

        jLabel8.setText("Item Name");

        jLabel9.setText("Supplier");

        jLabel10.setText("Unit");

        jLabel11.setText("Price");

        jLabel12.setText("Supplying");

        addButton.setText("Add New");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        supplierComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        supplierComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                supplierComboBoxMouseClicked(evt);
            }
        });
        supplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(jLabel9))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(codeTextField)
                                    .addComponent(nameTextField)
                                    .addComponent(supplierComboBox, 0, 194, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel10)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel11)
                                            .addGap(75, 75, 75)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(48, 48, 48)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(supplyCheckBox)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(unitTextField)
                                        .addComponent(priceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addGap(51, 51, 51)
                        .addComponent(saveButton)
                        .addGap(48, 48, 48)
                        .addComponent(deleteButton)
                        .addContainerGap(64, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(codeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(unitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addComponent(jLabel11))
                    .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(supplyCheckBox))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(saveButton)
                    .addComponent(deleteButton))
                .addContainerGap(70, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void itemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMouseClicked
        // TODO add your handling code here:
        int index = itemTable.getSelectedRow();
        if (index >= 0) {
            saveForAdd=false;
            codeTextField.disable();
            codeTextField.setText(itemList.get(index).getItemCode());
            nameTextField.setText(itemList.get(index).getItemName());

            supplierComboBox.removeAllItems();
            SupplierPanel supFrame = new SupplierPanel();
            for (SupplierDTO supplierDTO : supFrame.supplierList) {
                supplierComboBox.addItem(supplierDTO.getSupCode() + "-" + supplierDTO.getSupName());
            }
            supplierComboBox.setSelectedItem(itemList.get(index).getSupplier());

            unitTextField.setText(itemList.get(index).getUnit());
            priceTextField.setText("" + itemList.get(index).getPrice());
            if (itemList.get(index).getSupplying() == 1) {
                supplyCheckBox.setSelected(true);
            } else {
                supplyCheckBox.setSelected(false);
            }
        }
    }//GEN-LAST:event_itemTableMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        saveForAdd=true;
        codeTextField.enable();
        codeTextField.setText("");
        codeTextField.requestFocus(true);
        nameTextField.setText("");
        supplierComboBox.removeAllItems();
        SupplierPanel supFrame = new SupplierPanel();
        for (SupplierDTO supplierDTO : supFrame.supplierList) {
            supplierComboBox.addItem(supplierDTO.getSupCode() + "-" + supplierDTO.getSupName());
        }
        unitTextField.setText("");
        priceTextField.setText("");
        supplyCheckBox.setSelected(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if (saveForAdd == true) { // save add
            boolean checkCode = true;
            for (ItemDTO itemDTO : itemList) {
                if (codeTextField.getText().toUpperCase().equals(itemDTO.getItemCode())) {
                    checkCode = false;
                }
            }
            if (codeTextField.getText().isEmpty() || checkCode == false ||  codeTextField.getText().length() >10) {
                JOptionPane.showMessageDialog(null, "Code is not valid!");
                codeTextField.requestFocus(true);
            } else if (nameTextField.getText().isEmpty() || nameTextField.getText().length() > 50) {
                JOptionPane.showMessageDialog(null, "Name is not valid!");
                nameTextField.requestFocus(true);
            } else if (unitTextField.getText().isEmpty() || unitTextField.getText().length() > 50) {
                JOptionPane.showMessageDialog(null, "Unit is not valid!");
                unitTextField.requestFocus(true);
            } else if (priceTextField.getText().isEmpty() || !priceTextField.getText().matches("[0-9.]+") || priceTextField.getText().equals("0")) {
                JOptionPane.showMessageDialog(null, "Price is not valid!");
                priceTextField.requestFocus(true);
            } else {
                int insertSupplying = 0;
                if (supplyCheckBox.isSelected()) {
                    insertSupplying = 1;
                }

                String[] supCode = supplierComboBox.getSelectedItem().toString().split("-");//split item cua combobox (code-name) --> code de them vao database

                try {
                    ItemDAO.insertItem(codeTextField.getText(), nameTextField.getText(), unitTextField.getText(),
                            Float.valueOf(priceTextField.getText()), insertSupplying, supCode[0]);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                saveForAdd=false;
                loadItemTable();
            }
        }else {  //save update 
            if (nameTextField.getText().isEmpty() || nameTextField.getText().length() > 50) {
                JOptionPane.showMessageDialog(null, "Name is not valid!");
                nameTextField.requestFocus(true);
            } else if (unitTextField.getText().isEmpty() || unitTextField.getText().length() > 50) {
                JOptionPane.showMessageDialog(null, "Unit is not valid!");
                unitTextField.requestFocus(true);
            } else if (priceTextField.getText().isEmpty() || !priceTextField.getText().matches("[0-9.]+") || priceTextField.getText().equals("0")) {
                JOptionPane.showMessageDialog(null, "Price is not valid!");
                priceTextField.requestFocus(true);
            } else {
                int updateSupplying = 0;
                if (supplyCheckBox.isSelected()) {
                    updateSupplying = 1;
                }
                
                String[] supCode = supplierComboBox.getSelectedItem().toString().split("-");//split item cua combobox (code-name) --> code de them vao database
                
                try {
                    ItemDAO.updateItem(codeTextField.getText(), nameTextField.getText(), unitTextField.getText(),
                            Float.valueOf(priceTextField.getText()), updateSupplying, supCode[0]);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                saveForAdd = false;
                loadItemTable();
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void supplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboBoxActionPerformed

    }//GEN-LAST:event_supplierComboBoxActionPerformed

    private void supplierComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supplierComboBoxMouseClicked
        // TODO add your handling code here:
        supplierComboBox.removeAllItems();
        SupplierPanel supFrame = new SupplierPanel();
        for (SupplierDTO supplierDTO : supFrame.supplierList) {
            supplierComboBox.addItem(supplierDTO.getSupCode() + "-" + supplierDTO.getSupName());
        }
    }//GEN-LAST:event_supplierComboBoxMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (saveForAdd == false) {
            int choice = JOptionPane.showConfirmDialog(null, "Do you want to delete this row ?", "Delete", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                try {
                    ItemDAO.deleteItem(codeTextField.getText());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                loadItemTable();
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField codeTextField;
    private javax.swing.JButton deleteButton;
    public javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField priceTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox<String> supplierComboBox;
    private javax.swing.JCheckBox supplyCheckBox;
    private javax.swing.JTextField unitTextField;
    // End of variables declaration//GEN-END:variables
}
